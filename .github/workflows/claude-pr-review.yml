name: Claude Automatic PR Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]

jobs:
  automatic-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*)"
            --max-turns 50
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            You are reviewing a Pull Request for the YouTube Music Scrobbler web application. 
            This is a TypeScript/JavaScript monorepo with:
            - Next.js web app (apps/web)
            - NestJS worker app (apps/worker)
            - Admin dashboard (apps/web-admin)
            - Prisma database layer
            - BullMQ job processing

            Please provide a comprehensive code review focusing on:

            ## Code Quality & Best Practices
            - TypeScript best practices and type safety
            - React/Next.js patterns and performance
            - NestJS architecture and decorators
            - Async/await usage and error handling
            - Code readability and maintainability

            ## Scrobbling Logic & Data Flow
            - YouTube Music data parsing accuracy
            - Last.fm API integration correctness
            - Timestamp calculation logic (recently fixed timing issues)
            - Job queue processing efficiency
            - Database operations and schema changes

            ## Security & Performance
            - Input validation and sanitization
            - API key and secret handling
            - SQL injection prevention
            - XSS prevention in UI components
            - Performance implications of changes
            - Memory usage and potential leaks

            ## Testing & Documentation
            - Test coverage for new functionality
            - Edge cases consideration
            - Documentation updates needed
            - Breaking changes identification

            Use inline comments for specific code issues and a summary comment for overall feedback.
            Be constructive and helpful in your review.