name: Deploy to Server

on:
  push:
    branches:
      - master
    paths:
      - "apps/worker/**"
      - "packages/**"
      - "pnpm-lock.yaml"
      - "package.json"
      - "schema.prisma"
      - "migrations/**"
      - ".github/workflows/deploy.yml"

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for relevant changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            echo "Changed files: $CHANGED_FILES"
            
            if echo "$CHANGED_FILES" | grep -E "(^apps/worker/|^packages/|^pnpm-lock\.yaml$|^package\.json$|^schema\.prisma$|^migrations/|^\.github/workflows/deploy\.yml$)"; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "Relevant changes detected, deployment will proceed"
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "No relevant changes detected, skipping deployment"
            fi
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: check-changes
    if: needs.check-changes.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH known hosts
        run: |
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy application
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_DIR: ~/ytmusic-scrobbler-web
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST << EOF
            export PATH=$PATH:/home/$REMOTE_USER/.nvm/versions/node/v22.3.0/bin:/home/$REMOTE_USER/.local/share/pnpm
            cd $REMOTE_DIR
            git pull
            pm2 stop yt-music-scrobbler-worker
            pkill turbo
            pnpm install
            pnpm build --filter worker
            pkill turbo
            redis-cli flushall
            pm2 flush
            pm2 start yt-music-scrobbler-worker
          EOF
