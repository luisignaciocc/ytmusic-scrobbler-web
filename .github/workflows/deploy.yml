name: Deploy to Server

on:
  push:
    branches:
      - master
    paths:
      - "apps/worker/**"
      - "apps/web/**"
      - "packages/**"
      - "pnpm-lock.yaml"
      - "package.json"
      - "schema.prisma"
      - "migrations/**"
      - ".github/workflows/deploy.yml"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-deploy-worker: ${{ steps.changes.outputs.should-deploy-worker }}
      should-deploy-web: ${{ steps.changes.outputs.should-deploy-web }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for relevant changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            echo "Changed files: $CHANGED_FILES"
            
            # Check worker changes
            if echo "$CHANGED_FILES" | grep -E "(^apps/worker/|^packages/|^pnpm-lock\.yaml$|^package\.json$|^schema\.prisma$|^migrations/|^\.github/workflows/deploy\.yml$)"; then
              echo "should-deploy-worker=true" >> $GITHUB_OUTPUT
              echo "Worker changes detected"
            else
              echo "should-deploy-worker=false" >> $GITHUB_OUTPUT
              echo "No worker changes detected"
            fi
            
            # Check web changes
            if echo "$CHANGED_FILES" | grep -E "(^apps/web/|^packages/|^pnpm-lock\.yaml$|^package\.json$|^\.github/workflows/deploy\.yml$)"; then
              echo "should-deploy-web=true" >> $GITHUB_OUTPUT
              echo "Web changes detected"
            else
              echo "should-deploy-web=false" >> $GITHUB_OUTPUT
              echo "No web changes detected"
            fi
          else
            echo "should-deploy-worker=true" >> $GITHUB_OUTPUT
            echo "should-deploy-web=true" >> $GITHUB_OUTPUT
          fi

  validate-vercel-deploy:
    needs: check-changes
    if: |
      needs.check-changes.outputs.should-deploy-worker == 'true' ||
      needs.check-changes.outputs.should-deploy-web == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Vercel deployment to complete
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "⏳ Waiting for Vercel deployment to complete..."
          
          # Get the current commit SHA
          COMMIT_SHA="${{ github.sha }}"
          echo "Looking for deployment of commit: $COMMIT_SHA"
          
          # Wait up to 10 minutes for deployment
          MAX_ATTEMPTS=60
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS: Checking Vercel deployments..."
            
            # Get deployments for this commit
            DEPLOYMENTS=$(curl -s \
              -H "Authorization: Bearer $VERCEL_TOKEN" \
              "https://api.vercel.com/v6/deployments?projectId=$VERCEL_PROJECT_ID&gitSource.sha=$COMMIT_SHA")
            
            if [ $? -ne 0 ]; then
              echo "❌ Failed to fetch deployments from Vercel API"
              exit 1
            fi
            
            # Check if any deployment exists for this commit
            DEPLOYMENT_COUNT=$(echo "$DEPLOYMENTS" | jq -r '.deployments | length')
            
            if [ "$DEPLOYMENT_COUNT" -gt 0 ]; then
              # Get the latest deployment
              LATEST_DEPLOYMENT=$(echo "$DEPLOYMENTS" | jq -r '.deployments[0]')
              DEPLOYMENT_STATE=$(echo "$LATEST_DEPLOYMENT" | jq -r '.state')
              DEPLOYMENT_URL=$(echo "$LATEST_DEPLOYMENT" | jq -r '.url')
              
              echo "Found deployment with state: $DEPLOYMENT_STATE"
              echo "Deployment URL: https://$DEPLOYMENT_URL"
              
              case "$DEPLOYMENT_STATE" in
                "READY")
                  echo "✅ Vercel deployment completed successfully!"
                  exit 0
                  ;;
                "ERROR"|"CANCELED")
                  echo "❌ Vercel deployment failed with state: $DEPLOYMENT_STATE"
                  echo "🚫 Cancelling VPS deployment to prevent potential issues"
                  exit 1
                  ;;
                "BUILDING"|"QUEUED"|"INITIALIZING")
                  echo "⏳ Deployment still in progress (state: $DEPLOYMENT_STATE)..."
                  ;;
                *)
                  echo "🔍 Unknown deployment state: $DEPLOYMENT_STATE"
                  ;;
              esac
            else
              echo "📡 No deployment found yet for this commit..."
            fi
            
            sleep 10
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "⏰ Timeout: Vercel deployment took longer than expected"
          echo "🚫 Cancelling VPS deployment for safety"
          exit 1

  stop-worker:
    needs: [check-changes, validate-vercel-deploy]
    if: |
      always() &&
      (needs.check-changes.outputs.should-deploy-worker == 'true' ||
       needs.check-changes.outputs.should-deploy-web == 'true') &&
      needs.validate-vercel-deploy.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH known hosts
        run: |
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Stop Worker for Build
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_DIR: ~/ytmusic-scrobbler-web
          SHOULD_DEPLOY_WORKER: ${{ needs.check-changes.outputs.should-deploy-worker }}
          SHOULD_DEPLOY_WEB: ${{ needs.check-changes.outputs.should-deploy-web }}
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST << EOF
            export PATH=$PATH:/home/$REMOTE_USER/.nvm/versions/node/v22.3.0/bin:/home/$REMOTE_USER/.local/share/pnpm
            cd $REMOTE_DIR
            git pull
            echo "🔄 Stopping worker to free resources for build..."
            if [ "$SHOULD_DEPLOY_WORKER" = "true" ] && [ "$SHOULD_DEPLOY_WEB" = "true" ]; then
              echo "   (Both worker and web will be built)"
            elif [ "$SHOULD_DEPLOY_WORKER" = "true" ]; then
              echo "   (Worker will be built)"  
            else
              echo "   (Web will be built - worker needs to be stopped to free resources)"
            fi
            pm2 stop yt-music-scrobbler-worker || true
            pkill turbo || true
            echo "✅ Worker stopped, web remains online during builds"
          EOF

  build-and-deploy:
    needs: [check-changes, validate-vercel-deploy, stop-worker]
    if: |
      always() &&
      (needs.check-changes.outputs.should-deploy-worker == 'true' || 
       needs.check-changes.outputs.should-deploy-web == 'true') &&
      needs.validate-vercel-deploy.result == 'success' &&
      (needs.stop-worker.result == 'success' || needs.stop-worker.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Copy SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Add SSH known hosts
        run: |
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: Build and Deploy Services
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_DIR: ~/ytmusic-scrobbler-web
          SHOULD_DEPLOY_WORKER: ${{ needs.check-changes.outputs.should-deploy-worker }}
          SHOULD_DEPLOY_WEB: ${{ needs.check-changes.outputs.should-deploy-web }}
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST << EOF
            export PATH=$PATH:/home/$REMOTE_USER/.nvm/versions/node/v22.3.0/bin:/home/$REMOTE_USER/.local/share/pnpm
            cd $REMOTE_DIR
            
            echo "📦 Installing dependencies..."
            pnpm install
            
            # Build worker first if needed (worker is already stopped)
            if [ "$SHOULD_DEPLOY_WORKER" = "true" ]; then
              echo "🏗️ Building worker (offline)..."
              pnpm build --filter worker
              pkill turbo || true
              echo "✅ Worker build completed"
            fi
            
            # Build web if needed (web stays online during build)
            if [ "$SHOULD_DEPLOY_WEB" = "true" ]; then
              echo "🏗️ Building web app (online)..."
              pnpm build --filter web
              pkill turbo || true
              echo "✅ Web build completed"
            fi
            
            # Start worker back up (it was stopped for builds)
            if [ "$SHOULD_DEPLOY_WORKER" = "true" ]; then
              echo "🗑️ Clearing Redis..."
              redis-cli flushall
              pm2 flush
              echo "▶️ Starting worker (with new build)..."
              pm2 start yt-music-scrobbler-worker
              echo "✅ Worker started with updates"
            else
              echo "▶️ Starting worker (no changes, just stopped for web build)..."
              pm2 start yt-music-scrobbler-worker
              echo "✅ Worker restarted"
            fi
            
            # Restart web app if it was built (quick restart, minimal downtime)
            if [ "$SHOULD_DEPLOY_WEB" = "true" ]; then
              echo "🔄 Restarting web app (quick restart)..."
              pm2 restart yt-music-scrobbler-web
              echo "✅ Web app restarted"
            fi
            
            echo "🎉 Deployment completed successfully"
          EOF
