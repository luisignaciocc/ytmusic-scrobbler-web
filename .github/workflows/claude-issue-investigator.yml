name: Claude Issue Solver

on:
  issues:
    types: [opened, labeled]

jobs:
  fix-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          claude_args: |
            --allowedTools "Read,Write,Edit,Grep,Bash(gh issue:*),Bash(gh pr:*),Bash(git:*),Bash(pnpm test:*),Bash(pnpm type-check:*),Bash(pnpm lint:*)"
            --max-turns 100
          prompt: |
            REPO: ${{ github.repository }}
            ISSUE NUMBER: ${{ github.event.issue.number }}
            TITLE: ${{ github.event.issue.title }}
            BODY: ${{ github.event.issue.body }}
            AUTHOR: ${{ github.event.issue.user.login }}
            LABELS: ${{ join(github.event.issue.labels.*.name, ', ') }}

            You are solving a user-reported issue for the YouTube Music Scrobbler application.
            Your goal is to CREATE A PULL REQUEST with the actual fix when possible.

            ## Application Context
            This is a TypeScript monorepo that:
            - Fetches music history from YouTube Music using cookies
            - Scrobbles tracks to Last.fm API
            - Runs on a scheduled worker (5 min for Pro, 1 hour for Free users)
            - Uses PostgreSQL + Prisma for data storage
            - Has 3 apps: web frontend, worker backend, admin dashboard

            ## Your Process

            1. **Analyze the Issue**:
               - Classify issue type (bug, feature request, user error, configuration)
               - Identify affected components (web, worker, database, etc.)
               - Assess if it's code-fixable vs user support
               
            2. **Investigate Code**:
               - Search for relevant files using Grep and Read tools
               - Check recent commits and patterns in existing codebase
               - Focus on these common problem areas:
                 * YouTube Music parsing (apps/worker/src/utils/functions.ts)
                 * Timestamp calculation (apps/worker/src/app.consumer.ts)
                 * Authentication/cookies validation
                 * Last.fm API integration and error handling
                 * Job scheduling (BullMQ configuration)
                 * Database operations (Prisma queries)

            ## Decision Logic

            **IF the issue is fixable with code changes:**
            1. Create a new branch: `fix/issue-${{ github.event.issue.number }}-description`
            2. Make the necessary code changes using Edit/Write tools
            3. Run tests if needed: `pnpm test`, `pnpm type-check`, `pnpm lint`
            4. Create a PR that references the issue
            5. Post a comment on the issue linking to the PR

            **IF the issue needs user action/support:**
            1. Post detailed troubleshooting steps
            2. Suggest the troubleshooting script: `pnpm tsx -r dotenv/config scripts/get-history.ts <user-email>`
            3. Add appropriate labels

            **IF it's a feature request:**
            1. Consider if it's a small enhancement you can implement
            2. If implementable, create the feature in a PR
            3. If too complex, provide detailed implementation plan

            ## PR Creation Format
            When creating PRs, use this format:

            **Title**: `Fix: [Brief description] (closes #${{ github.event.issue.number }})`

            **Body**:
            ```
            ## Summary
            Fixes #${{ github.event.issue.number }}

            [Description of the fix]

            ## Changes Made
            - [List of specific changes]

            ## Testing
            - [Testing performed]

            ## User Impact
            - [How this helps the user]
            ```

            ## User Comment Format (if no PR created)

            ### üîç Issue Analysis
            - **Type**: [Bug/Feature/Support/etc.]
            - **Component**: [Web/Worker/Database/etc.]  
            - **Action**: [PR Created/User Support/etc.]

            ### üõ†Ô∏è Solution
            [Detailed solution or troubleshooting steps]

            ### üìù Next Steps
            [What the user should do next]

            Always prioritize creating PRs for fixable issues. Be proactive in solving problems!
