// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  name                      String
  email                     String    @unique
  isActive                  Boolean   @default(false)
  picture                   String
  ytmusicCookie             String?   @db.Text
  lastFmSessionKey          String?
  lastFmUsername            String?
  Songs                     Song[]
  lastSuccessfulScrobble    DateTime?
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @default(now()) @updatedAt
  deletedAt                 DateTime?
  subscriptionId            String? // Paddle subscription ID
  subscriptionStatus        String? // active, trialing, past_due, paused, cancelled
  subscriptionPlan          String    @default("free") // free, pro
  subscriptionEndDate       DateTime?
  scheduledCancellationDate DateTime?
  lastNotificationSent      DateTime?
  notificationsEnabled      Boolean   @default(true)
  notificationEmail         String?
  consecutiveFailures       Int       @default(0)
  lastFailureType           String?   // AUTH, NETWORK, LASTFM, UNKNOWN
  lastFailedAt              DateTime?
  authNotificationCount     Int       @default(0)  // Count of auth failure notifications sent (max 3)
  isFirstTimeReady          Boolean   @default(false) // Include in next Pro cycle for immediate first scrobble
}

model Song {
  id               String   @id @default(cuid())
  title            String
  artist           String
  album            String?
  arrayPosition    Int      @default(0)
  maxArrayPosition Int      @default(0)
  addedAt          DateTime
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}
